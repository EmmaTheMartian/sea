use std/fs
use std/str

#static
rec ElementParams(element: String, params: String)

rec Page(file: File, top: ^ElementParams, element_stack: ElementParams[256])

#static
fun page_push(page: ^Page, element: String, params: String) {
	fprintf(page^.file, c"<%.*s %.*s>", element.len, element.str, params.len, params.str)
	page^.top++
	page^.top^.element = element
	page^.top^.params = params
}

#static
fun page_pop(page: ^Page) {
	fprintf(page^.file, c"</%.*s>", page^.top^.element.len, page^.top^.element.str)
	page^.top--
}

#static
fun page_raw(page: ^Page, element: String, params: String, text: String) {
	fprintf(
		page^.file, c"<%.*s %.*s>%.*s</%.*s>",
		element.len, element.str,
		params.len, params.str,
		text.len, text.str,
		element.len, element.str
	)
}

fun new_page(file: File): Page {
	var p = new Page(file)
	fprintf(file, c"<!DOCTYPE html>")
	p.top = ref p.element_stack[0]
	ret p
}

fun p_end(page: ^Page) -> page_pop(page)

// Containers
fun p_html(page: ^Page, lang: String) -> page_push(page, "html", concat("lang=", lang))
fun p_head(page: ^Page) -> page_push(page, "head", "")
fun p_body(page: ^Page) -> page_push(page, "body", "")
fun p_div(page: ^Page) -> page_push(page, "div", "")
fun p_div_p(page: ^Page, params: String) -> page_push(page, "div", params)

// Data
fun p_title(page: ^Page, it: String) -> page_raw(page, "title", "", it)
fun p_link(page: ^Page, rel: String, href: String) ->
	fprintf(page^.file, c"<link rel='%.*s' href='%.*s'></link>", rel.len, rel.str, href.len, href.str)

// Content
fun p_h1(page: ^Page, it: String) -> page_raw(page, "h1", "", it)
fun p_h2(page: ^Page, it: String) -> page_raw(page, "h2", "", it)
fun p_h3(page: ^Page, it: String) -> page_raw(page, "h3", "", it)
fun p_h4(page: ^Page, it: String) -> page_raw(page, "h4", "", it)
fun p_h5(page: ^Page, it: String) -> page_raw(page, "h5", "", it)
fun p_h6(page: ^Page, it: String) -> page_raw(page, "h6", "", it)
fun p_p(page: ^Page, it: String) -> page_raw(page, "p", "", it)
