raw [ #include <time.h> ]

raw [ typedef struct tm __tm; ] // Sea can't bind to types that aren't typedef'd.

def CCalenderTime = ^__tm
def Timestamp = time_t // Usually a i32 or i64

rec DateTime(
	unix: Timestamp,
	year: u16,
	month: u8,
	day: u8,
	hour: u8,
	minute: u8,
	second: u8,
	local: bool,
)

fun make_datetime_from_time_info(timestamp: Timestamp, t: CCalenderTime, is_local: bool): DateTime {
	ret new DateTime(
		timestamp,
		t^.tm_year,
		t^.tm_mon,
		t^.tm_mday,
		t^.tm_hour,
		t^.tm_min,
		t^.tm_sec,
		true
	)
}

fun get_local_datetime_from_timestamp(timestamp: Timestamp): DateTime {
	let t: CCalenderTime = localtime(ref timestamp)
	let dt = make_datetime_from_time_info(timestamp, t, true)
	free(t)
	ret dt
}

fun get_utc_datetime_from_timestamp(timestamp: Timestamp): DateTime {
	let t: CCalenderTime = gmtime(ref timestamp)
	let dt = make_datetime_from_time_info(timestamp, t, false)
	free(t)
	ret dt
}

fun get_timestamp(): Timestamp {
	// We cast nil to ^void to avoid a CC warning about nil being a constant
	ret time(nil as ^void) as Timestamp
}

fun get_current_time(): DateTime {
	ret get_local_datetime_from_timestamp(get_timestamp())
}
