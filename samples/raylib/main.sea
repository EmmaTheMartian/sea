raw[
#include <raylib.h>
#include <time.h>
]

rec Grid(elements: Color[10][10])
fun grid_set(grid: ^Grid, x: int, y: int, it: T) -> grid^.elements[x][y] = it
fun grid_get(grid: ^Grid, x: int, y: int): T -> ret grid^.elements[x][y]

var tile_size = 20
var world = new Grid()

#inline
fun render() {
	for y in 0 to 11 {
		for x in 0 to 11 {
			DrawRectangle(y * tile_size, x * tile_size, tile_size, tile_size, grid_get(ref world, x, y))
		}
	}

	DrawFPS(10, 10)
}

#inline
fun rand_u8(): u8 -> ret (rand() / (RAND_MAX as float) * 255) as u8

#inline
fun random_color(): Color -> ret new Color(rand_u8(), rand_u8(), rand_u8(), rand_u8())

fun main(): int {
	srand(time(NULL))

	SetTargetFPS(60)
	InitWindow(800, 600, c"Raylib with Sea")

	for y in 0 to 11 {
		for x in 0 to 11 {
			grid_set(ref world, x, y, random_color())
		}
	}

	for not WindowShouldClose() {
		BeginDrawing()
		ClearBackground(RAYWHITE)
		render()
		EndDrawing()
	}

	CloseWindow()

	ret 0
}
