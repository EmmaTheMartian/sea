use std[io]

raw [
	#include <stdlib.h>
	#include <stdio.h>
	#include <stdint.h>
]

rec Box(val: ^int)

#union
rec UnBox(
	val_int: int,
	val_float: float,
	val_any: ^void
)

tag Suit(
	Hearts,
	Diamonds,
	Clubs,
	Spades,
)

rec Card(suit: Suit, value: u8)

tag rec Action(
	Play(card: Card)
	Discard
	SomethingElse(suit: Suit, value: uint8_t)
)

fun play(action: Action) {
	switch action.kind {
		case Play -> printf(c"Playing a card: %d of %d s\n", action.Play.card.value, action.Play.card.suit)
		case Discard -> printf(c"Discarding a card\n")
		case SomethingElse -> printf(c"Something else: %d of %d s\n", action.SomethingElse.value, action.SomethingElse.suit)
	}
}

fun to_heap(it: int): ^int {
	var p: ^int = malloc(sizeof(it)) as ^int
	p ^= it
	ret p
}

fun echo(it: int): ^int -> ret to_heap(it)

fun box(it: int): Box -> ret new Box(echo(it))

fun main(argc: int, argv: ^char[]): int {
	printf(c"%d\n", (box(42).val)^)

	if argc == 1 ->println("No arguments provided!")
	else -> println("Arguments provided!")

	let actions: Action[3] = [
		new Action(Play, new Card(Spades, 4)),
		new Action(Discard),
		new Action(SomethingElse, Spades, 4)
	]

	for i in 0 to 3 {
		play(actions[i])
	}

	for 0 to 10 -> printf(c"A")
	for var i: int = 0 ; i < 3 ; i = i + 1 -> printf(c"!")
	printf(c"\n")

	for true -> break

	let somethingI32 = 0
	let somethingF32 = 42.0
	let somethingFalse = false
	let somethingTrue = true
	let somethingChar = `\0`
	let somethingString = "Hello, World!"
	let somethingCString = c"Hello, World!"
	let somethingBox = box(12)
	let referentialSomethingBox = ref somethingBox
	let dereferentialSomethingBox = referentialSomethingBox^
	let somethingArray = [ 0, 1, 2, 3 ]
	let somethingArrayDefined: i32[4] = []
	let somethingCard = new Card(Hearts, 12)
	let somethingCardSuit = somethingCard.suit
	let somethingAction = new Action(Play, somethingCard)
	let somethingActionValue = somethingAction.Play.card.value

	let somethingComplex = (box(42).val)^

	if true -> println("true")
	if false -> println("false")
	if true or true -> println("true or true")
	if true and true -> println("true and true")

	var steel: bool = false
	let flint = steel = true
	if flint and steel -> println("I am Steve!")
}
