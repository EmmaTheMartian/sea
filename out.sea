raw [
	#include <stdlib.h>
	#include <stdio.h>
	#include <stdint.h>
]

rec Box(val: ^int)

#union
rec UnBox(
	val_int: int,
	val_float: float,
	val_any: ^void
)

tag Suit(
	Hearts,
	Diamonds,
	Clubs,
	Spades,
)

rec Card(suit: Suit, value: uint8_t)

tag rec Action(
	Play(card: Card)
	Discard
	SomethingElse(suit: Suit, value: uint8_t)
)

fun play(action: Action) {
	switch action.kind {
		case Play -> printf(c"Playing a card: %d of %d s\n", action.Play.card.value, action.Play.card.suit)
		case Discard -> printf(c"Discarding a card\n")
		case SomethingElse -> printf(c"Something else: %d of %d s\n", action.SomethingElse.value, action.SomethingElse.suit)
	}
}

fun to_heap(it: int): ^int {
	var p: ^int = malloc(sizeof(it)) as ^int
	p ^= it
	ret p
}

fun echo(it: int): ^int -> ret to_heap(it)

fun box(it: int): Box -> ret new Box(echo(it))

fun main(argc: int, argv: ^char[]): int {
	printf(c"%d\n", (box(42).val)^)

	if argc == 0 {
		printf(c"No arguments provided!\n")
	} else {
		printf(c"Arguments provided!\n")
	}

	play(new Action(Play, new Card(Spades, 4)))
	play(new Action(Discard))
	play(new Action(SomethingElse, Spades, 4))
}
