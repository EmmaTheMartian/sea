use std/fs
use parser/lexer
use parser/parser

var coloured_messages = true

#noret
fun sea_panic(message: String) {
	if coloured_messages {
		printf(c"\033[1;31merror\033[0;1m %.*s\033[0m\n", message.len, message.str)
	} else {
		printf(c"error %.*s\n", message.len, message.str)
	}

	exit(1)
}

#noret
fun sea_panicc(message: ^char) -> sea_panic(stringView(strlen(message), message))

fun main(argc: int, argv: ^char[]): int {
	// TODO: replace with getopt
	if argc == 1 -> sea_panic("no input file provided.")

	let maybe_source = read_file(stringView(strlen(argv[1]), argv[1]))
	if is_empty{String}(maybe_source) -> sea_panic("failed to read input file")

	let source = unpack{String}(maybe_source)

	var lexer = new Lexer(source.str, source.str, 1)
	var L = ref lexer

	// TODO: feed tokens to the parser
	for var t = get_next_token(L) ; t.kind != TOKEN_EOF ; t = get_next_token(L) {
		print_token(t)
		if t.kind == TOKEN_ERR {
			var msg: ^char = nil as ^char
			asprintf(ref msg, c"on line %d: %.*s", lexer.line, t.len, t.start)
			sea_panicc(msg)
		}
	}
}
