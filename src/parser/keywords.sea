#(static, inline)
fun check_rest(id: ^char, len: int, start: int, rest: String, kind: TokenKind): TokenKind {
	var at = start

	for i in 0 to rest.len {
		if id[start+i] != rest.str[i] -> ret TOKEN_ID
		at++
	}

	// This ensures that things like `foreach` are recognized as TOKEN_ID instead of as TOKEN_K_FOR
	if at != len -> ret TOKEN_ID

	ret kind
}

fun check_keyword(id: ^char, len: int): TokenKind {
	// No keywords are only one character and none are longer than 8
	// characters (shortest being `if`/`in`/`to`/etc and longest being
	// `continue`). This allows us to make a little optimization here:
	if len < 1 or len > 8 -> ret TOKEN_ID

	switch id[0] {
		case `a` -> ret check_rest(id, len, 1, "s", TOKEN_K_AS)
		case `b` -> ret check_rest(id, len, 1, "reak", TOKEN_K_BREAK)
		case `c` {
			if len < 2 -> ret TOKEN_ID
			switch id[1] {
				case `a` -> ret check_rest(id, len, 2, "se", TOKEN_K_CASE)
				case `o` -> ret check_rest(id, len, 2, "ntinue", TOKEN_K_CONTINUE)
			}
		}
		case `d` -> ret check_rest(id, len, 1, "ef", TOKEN_K_DEF)
		case `e` {
			if len < 2 -> ret TOKEN_ID
			switch id[1] {
				case `a` -> ret check_rest(id, len, 2, "ch", TOKEN_K_EACH)
				case `l` -> ret check_rest(id, len, 2, "se", TOKEN_K_ELSE)
			}
		}
		case `f` {
			if len < 2 -> ret TOKEN_ID
			switch id[1] {
				case `a` -> ret check_rest(id, len, 2, "ll", TOKEN_K_FALL)
				case `o` -> ret check_rest(id, len, 2, "r", TOKEN_K_FOR)
				case `u` -> ret check_rest(id, len, 2, "n", TOKEN_K_FUN)
			}
		}
		case `g` -> ret check_rest(id, len, 1, "en", TOKEN_K_GEN)
		case `i` {
			// Since each keyword is two letters, we can do a length check here now
			if len != 2 -> ret TOKEN_ID
			switch id[1] {
				case `f` -> ret TOKEN_K_IF
				case `n` -> ret TOKEN_K_IN
			}
		}
		case `l` -> ret check_rest(id, len, 1, "et", TOKEN_K_LET)
		case `n` -> ret check_rest(id, len, 1, "ew", TOKEN_K_NEW)
		case `o` -> ret check_rest(id, len, 1, "f", TOKEN_K_OF)
		case `r` {
			if len < 2 -> ret TOKEN_ID
			switch id[1] {
				case `e` {
					// Since each keyword is three letters, we can do a length check here now
					if len != 3 -> ret TOKEN_ID
					switch id[2] {
						case `c` -> ret TOKEN_K_REC
						case `f` -> ret TOKEN_K_REF
						case `t` -> ret TOKEN_K_RET
					}
				}
			}
		}
		case `s` -> ret check_rest(id, len, 1, "witch", TOKEN_K_SWITCH) // noway it's a witch!
		case `t` {
			if len < 2 -> ret TOKEN_ID
			switch id[1] {
				case `a` -> ret check_rest(id, len, 2, "g", TOKEN_K_TAG)
				case `e` -> ret check_rest(id, len, 2, "m", TOKEN_K_TEM)
				case `o` {
					if len == 2 -> ret TOKEN_K_TO
					else -> ret TOKEN_ID
				}
			}
		}
		case `u` -> ret check_rest(id, len, 1, "se", TOKEN_K_USE)
		case `v` -> ret check_rest(id, len, 1, "ar", TOKEN_K_VAR)
	}

	ret TOKEN_ID
}
