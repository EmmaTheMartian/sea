use std/io

tag TokenKind(
	// Generic symbols
	TOKEN_EQ            // =
	TOKEN_COMMA         // ,
	TOKEN_COLON         // :
	TOKEN_SEMI          // ;
	TOKEN_PTR           // ^
	TOKEN_OPEN_PAREN    // (
	TOKEN_CLOSE_PAREN   // )
	TOKEN_OPEN_BRACKET  // [
	TOKEN_CLOSE_BRACKET // ]
	TOKEN_OPEN_BRACE    // {
	TOKEN_CLOSE_BRACE   // }
	TOKEN_HASH          // #
	TOKEN_PIPE          // ->

	// Operators
	TOKEN_OP_DOT  // .
	TOKEN_OP_NOT  // not
	TOKEN_OP_AND  // and
	TOKEN_OP_OR   // or
	TOKEN_OP_EQ   // ==
	TOKEN_OP_NEQ  // !=
	TOKEN_OP_GT   // >
	TOKEN_OP_GTEQ // >=
	TOKEN_OP_LT   // <
	TOKEN_OP_LTEQ // <=
	TOKEN_OP_INC  // ++
	TOKEN_OP_DEC  // --
	TOKEN_OP_ADD  // +
	TOKEN_OP_SUB  // -
	TOKEN_OP_MUL  // *
	TOKEN_OP_DIV  // /
	TOKEN_OP_MOD  // %

	// Allowed-at-top-level keywords
	TOKEN_K_USE // use
	TOKEN_K_REC // rec
	TOKEN_K_FUN // fun
	TOKEN_K_DEF // def
	TOKEN_K_TAG // tag
	TOKEN_K_TEM // tem
	TOKEN_K_GEN // gen
	TOKEN_K_VAR // var
	TOKEN_K_LET // let

	// Non-top-level keywords
	TOKEN_K_RET      // ret
	TOKEN_K_IF       // if
	TOKEN_K_ELSE     // else
	TOKEN_K_FOR      // for
	TOKEN_K_BREAK    // break
	TOKEN_K_CONTINUE // continue
	TOKEN_K_EACH     // each
	TOKEN_K_OF       // of
	TOKEN_K_NEW      // new
	TOKEN_K_REF      // ref
	TOKEN_K_AS       // as
	TOKEN_K_TO       // to
	TOKEN_K_IN       // in
	TOKEN_K_SWITCH   // switch
	TOKEN_K_CASE     // case
	TOKEN_K_FALL     // fall

	// Literals
	TOKEN_TRUE     // true
	TOKEN_FALSE    // false
	TOKEN_FLOAT    // [0-9_]+(\.[0-9_]+[fd]?)|([fd])
	TOKEN_INT      // [0-9_]+([lu]?)
	TOKEN_HEX      // 0x[0-9a-f_]+
	TOKEN_BINARY   // 0b[01_]
	TOKEN_ID       // [a-zA-Z_$]+
	TOKEN_STRING   // ".*"
	TOKEN_C_STRING // c".*"
	TOKEN_CHAR     // `\\?.`

	// Ignored
	TOKEN_WHITESPACE // [ \n\r\t]+
	TOKEN_COMMENT    // //[^\n]*
	TOKEN_ML_COMMENT // /\*.*\*/

	// Misc
	TOKEN_RAW
	TOKEN_EOF
	TOKEN_ERR
)

rec Token(kind: TokenKind, start: ^char, len: int, line: int)

fun get_token_str(token: Token): String -> ret stringView(token.len, token.start)

fun print_token(token: Token) {
	switch token.kind {
		case TOKEN_EQ            -> print("EQ")
		case TOKEN_COMMA         -> print("COMMA")
		case TOKEN_COLON         -> print("COLON")
		case TOKEN_SEMI          -> print("SEMI")
		case TOKEN_PTR           -> print("PTR")
		case TOKEN_OPEN_PAREN    -> print("OPEN_PAREN")
		case TOKEN_CLOSE_PAREN   -> print("CLOSE_PAREN")
		case TOKEN_OPEN_BRACKET  -> print("OPEN_BRACKET")
		case TOKEN_CLOSE_BRACKET -> print("CLOSE_BRACKET")
		case TOKEN_OPEN_BRACE    -> print("OPEN_BRACE")
		case TOKEN_CLOSE_BRACE   -> print("CLOSE_BRACE")
		case TOKEN_HASH          -> print("HASH")
		case TOKEN_PIPE          -> print("PIPE")
		case TOKEN_OP_DOT        -> print("OP_DOT")
		case TOKEN_OP_NOT        -> print("OP_NOT")
		case TOKEN_OP_AND        -> print("OP_AND")
		case TOKEN_OP_OR         -> print("OP_OR")
		case TOKEN_OP_EQ         -> print("OP_EQ")
		case TOKEN_OP_NEQ        -> print("OP_NEQ")
		case TOKEN_OP_GT         -> print("OP_GT")
		case TOKEN_OP_GTEQ       -> print("OP_GTEQ")
		case TOKEN_OP_LT         -> print("OP_LT")
		case TOKEN_OP_LTEQ       -> print("OP_LTEQ")
		case TOKEN_OP_INC        -> print("OP_INC")
		case TOKEN_OP_DEC        -> print("OP_DEC")
		case TOKEN_OP_ADD        -> print("OP_ADD")
		case TOKEN_OP_SUB        -> print("OP_SUB")
		case TOKEN_OP_MUL        -> print("OP_MUL")
		case TOKEN_OP_DIV        -> print("OP_DIV")
		case TOKEN_OP_MOD        -> print("OP_MOD")
		case TOKEN_K_USE         -> print("K_USE")
		case TOKEN_K_REC         -> print("K_REC")
		case TOKEN_K_FUN         -> print("K_FUN")
		case TOKEN_K_DEF         -> print("K_DEF")
		case TOKEN_K_TAG         -> print("K_TAG")
		case TOKEN_K_TEM         -> print("K_TEM")
		case TOKEN_K_GEN         -> print("K_GEN")
		case TOKEN_K_VAR         -> print("K_VAR")
		case TOKEN_K_LET         -> print("K_LET")
		case TOKEN_K_RET         -> print("K_RET")
		case TOKEN_K_IF          -> print("K_IF")
		case TOKEN_K_ELSE        -> print("K_ELSE")
		case TOKEN_K_FOR         -> print("K_FOR")
		case TOKEN_K_BREAK       -> print("K_BREAK")
		case TOKEN_K_CONTINUE    -> print("K_CONTINUE")
		case TOKEN_K_EACH        -> print("K_EACH")
		case TOKEN_K_OF          -> print("K_OF")
		case TOKEN_K_NEW         -> print("K_NEW")
		case TOKEN_K_REF         -> print("K_REF")
		case TOKEN_K_AS          -> print("K_AS")
		case TOKEN_K_TO          -> print("K_TO")
		case TOKEN_K_IN          -> print("K_IN")
		case TOKEN_K_SWITCH      -> print("K_SWITCH")
		case TOKEN_K_CASE        -> print("K_CASE")
		case TOKEN_K_FALL        -> print("K_FALL")
		case TOKEN_TRUE          -> print("TRUE")
		case TOKEN_FALSE         -> print("FALSE")
		case TOKEN_FLOAT         -> print("FLOAT")
		case TOKEN_INT           -> print("INT")
		case TOKEN_HEX           -> print("HEX")
		case TOKEN_BINARY        -> print("BINARY")
		case TOKEN_ID            -> print("ID")
		case TOKEN_STRING        -> print("STRING")
		case TOKEN_C_STRING      -> print("C_STRING")
		case TOKEN_CHAR          -> print("CHAR")
		case TOKEN_WHITESPACE    -> print("WHITESPACE")
		case TOKEN_COMMENT       -> print("COMMENT")
		case TOKEN_ML_COMMENT    -> print("ML_COMMENT")
		case TOKEN_RAW           -> print("RAW")
		case TOKEN_EOF           -> print("EOF")
		case TOKEN_ERR           -> print("ERR")
	}
	printf(c" = '%.*s'\n", token.len, token.start)
}

rec SeaType(pointers: int, name: String, params: )
