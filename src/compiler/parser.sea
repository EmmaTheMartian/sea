use std/ds/dynarr
use compiler/lexer

rec Parser(L: ^Lexer, root: ASTNode, cur: Token, prev: Token, errored: bool)

fun make_parser(L: ^Lexer): Parser -> ret new Parser(L, new Token(), new Token(), false)

#static
fun p_error_at(P: ^Parser, token: Token, message: String) {
	fprintf(stderr, c"[line %d] error", token.line)

	switch token.kind {
		case TOKEN_EOF -> eprint(" at eof")
		case TOKEN_ERR -> break
		else -> fprintf(stderr, c" at '%.*s'", token.len, token.start)
	}

	eprint(": ")
	eprintln(message)

	P^.errored = true
}

#(static, inline) fun p_error_at_prev(P: ^Parser, message: String) -> p_error_at(P, P^.prev, message)
#(static, inline) fun p_error_at_cur(P: ^Parser, message: String) -> p_error_at(P, P^.cur, message)

#(static, inline)
fun p_advance(P: ^Parser) {
	P^.prev = P^.cur

	// We loop here so that we can print multiple lexer errors at the same
	// time. Hopefully this makes debugging errors a bit easier
	for true {
		P^.cur = get_next_token(P^.L)

		//TODO: When Sea gets compile-time code, replace this
		raw[
			#if SEA_PRINT_TOKENS
			printf("Token: ")
			print_token(P^.cur)
			#endif
		]

		if P^.cur.kind != TOKEN_ERR -> break

		p_error_at_cur(P, string_view(P^.cur.len, P^.cur.start))
	}
}

#static
fun p_accept(P: ^Parser, kind: TokenKind): bool {
	if P^.cur.kind == kind {
		p_advance(P)
		ret true
	}
	ret false
}

#static
fun p_expect(P: ^Parser, kind: TokenKind, message: String): bool {
	if p_accept(P, kind) -> ret true
	p_error_at_cur(P, message)
	ret false
}

#static
fun parse_top_level_statement(P: ^Parser) {
	println("hit top level statement")
	if p_accept(P, TOKEN_K_USE) {
		println("hit use")
		// use ID ('/' ID)*
		var path = make_dynarr{String}(1, sizeof(String), 2)
		p_expect(P, TOKEN_ID, "expected identifier after `use`")
		dynarr_append{String}(ref path, get_token_str(P^.prev))
		for p_accept(P, TOKEN_OP_DIV) {
			p_expect(P, TOKEN_ID, "expected identifier after `/` in a `use` path")
			dynarr_append{String}(ref path, get_token_str(P^.prev))
		}
		var node = new $NodeUse(path)
		ret new ASTNode(NodeUse, to_heap(node))
	} else {
		print("unexpected token: ")
		print_token(P^.cur)
		p_error_at_cur(P, "unexpected token (see above)")
		exit(1)
	}
}

fun parse_all(P: ^Parser) {
	p_advance(P)

	for true {
		print("token: ")
		print_token(P^.cur)

		if P^.cur.kind == TOKEN_EOF -> break

		parse_top_level_statement(P)
	}
}
